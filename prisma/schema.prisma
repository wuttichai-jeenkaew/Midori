generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(uuid())
  email              String?                 @unique
  displayName        String?
  avatarUrl          String?
  locale             String?                 @default("th")
  isActive           Boolean                 @default(true)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  lastLoginAt        DateTime?
  authCredentials    AuthCredential[]
  emailVerifications AuthEmailVerification[]
  passwordResets     AuthPasswordReset[]
  generations        Generation[]
  loginLogs          LoginAttempt[]
  oauths             OAuthConnection[]
  projects           Project[]
  sessions           Session[]

  @@index([email])
}

model AuthCredential {
  id                 String                  @id @default(uuid())
  userId             String
  createdAt          DateTime                @default(now())
  expiresAt          DateTime?
  identifier         String
  isVerified         Boolean                 @default(false)
  metadata           Json?
  secret             String?
  type               String
  updatedAt          DateTime                @updatedAt
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailVerifications AuthEmailVerification[]
  passwordResets     AuthPasswordReset[]

  @@unique([userId, type, identifier])
  @@index([userId])
  @@index([identifier])
}

model AuthEmailVerification {
  id           String          @id @default(uuid())
  userId       String
  credentialId String?
  tokenHash    String
  expiresAt    DateTime
  usedAt       DateTime?
  createdAt    DateTime        @default(now())
  credential   AuthCredential? @relation(fields: [credentialId], references: [id])
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model AuthPasswordReset {
  id           String          @id @default(uuid())
  userId       String
  credentialId String?
  tokenHash    String
  expiresAt    DateTime
  usedAt       DateTime?
  createdAt    DateTime        @default(now())
  credential   AuthCredential? @relation(fields: [credentialId], references: [id])
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model OAuthConnection {
  id                    String        @id @default(uuid())
  userId                String
  provider              OAuthProvider
  providerAccountId     String
  accessTokenEncrypted  String?
  refreshTokenEncrypted String?
  scope                 String?
  expiresAt             DateTime?
  createdAt             DateTime      @default(now())
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id               String    @id @default(uuid())
  userId           String
  sessionTokenHash String    @unique
  ip               String?
  userAgent        String?
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  lastActiveAt     DateTime? @default(now())
  terminatedAt     DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model LoginAttempt {
  id         String        @id @default(uuid())
  userId     String?
  loginEmail String?
  provider   LoginProvider
  ip         String?
  success    Boolean
  createdAt  DateTime      @default(now())
  user       User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Project {
  id          String       @id @default(uuid())
  userId      String
  name        String
  description String?
  options     Json         @default("{}")
  visibility  Visibility   @default(private)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deployments Deployment[]
  files       File[]
  generations Generation[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  snapshots   Snapshot[]

  @@index([userId])
}

model File {
  id        String   @id @default(uuid())
  projectId String
  path      String
  type      FileType @default(code)
  isBinary  Boolean  @default(false)
  content   String?
  blob      Bytes?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
  @@index([projectId])
}

model Generation {
  id           String           @id @default(uuid())
  projectId    String
  userId       String
  prompt       String
  options      Json             @default("{}")
  model        String
  tokensInput  Int              @default(0)
  tokensOutput Int              @default(0)
  costUsd      Decimal          @default(0)
  createdAt    DateTime         @default(now())
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  changes      GenerationFile[]
  snapshots    Snapshot[]

  @@index([projectId])
  @@index([userId])
}

model GenerationFile {
  id           String               @id @default(uuid())
  generationId String
  filePath     String
  fileContent  String?
  changeType   GenerationChangeType @default(create)
  generation   Generation           @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@index([generationId])
}

model Snapshot {
  id               String      @id @default(uuid())
  projectId        String
  label            String?
  files            Json
  fromGenerationId String?
  createdAt        DateTime    @default(now())
  fromGeneration   Generation? @relation(fields: [fromGenerationId], references: [id])
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Deployment {
  id        String         @id @default(uuid())
  projectId String
  provider  DeployProvider
  state     DeployState    @default(queued)
  url       String?
  meta      Json?
  createdAt DateTime       @default(now())
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

enum Visibility {
  private
  unlisted
  public
}

enum FileType {
  code
  text
  config
  asset
}

enum PasswordAlgo {
  argon2id
  bcrypt
  scrypt
}

enum OAuthProvider {
  github
  google
  line
  custom_oauth
}

enum LoginProvider {
  credentials
  github
  google
  line
  custom_oauth
}

enum DeployProvider {
  vercel
  github_pages
  netlify
}

enum DeployState {
  queued
  building
  ready
  failed
}

enum GenerationChangeType {
  create
  update
  delete
}
