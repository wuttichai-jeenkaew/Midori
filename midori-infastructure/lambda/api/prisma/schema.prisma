// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// USERS
// =======================
model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  displayName  String    @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  locale       String    @default("th")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  authCredentials        AuthCredentials?
  authEmailVerifications AuthEmailVerification[]
  authPasswordResets     AuthPasswordReset[]
  oauthConnections       OauthConnection[]
  sessions               Session[]
  loginAttempts          LoginAttempt[]
  projects               Project[]
  generations            Generation[]
}

// =======================
// AUTH: Credentials
// =======================
model AuthCredentials {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @unique @db.Uuid @map("user_id")
  loginEmail        String   @unique @map("login_email")
  passwordHash      String   @map("password_hash")
  passwordAlgo      String   @default("argon2id") @map("password_algo")
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  passwordUpdatedAt DateTime @default(now()) @map("password_updated_at")
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// AUTH: Email Verifications
// =======================
model AuthEmailVerification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid @map("user_id")
  tokenHash  String   @map("token_hash")
  expiresAt  DateTime @map("expires_at")
  usedAt     DateTime? @map("used_at")
  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// AUTH: Password Resets
// =======================
model AuthPasswordReset {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid @map("user_id")
  tokenHash  String   @map("token_hash")
  expiresAt  DateTime @map("expires_at")
  usedAt     DateTime? @map("used_at")
  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// AUTH: OAuth Connections
// =======================
model OauthConnection {
  id                   String   @id @default(uuid()) @db.Uuid
  userId               String   @db.Uuid @map("user_id")
  provider             String
  providerAccountId    String   @map("provider_account_id")
  accessTokenEncrypted String?  @map("access_token_encrypted")
  refreshTokenEncrypted String? @map("refresh_token_encrypted")
  scope                String?
  expiresAt            DateTime? @map("expires_at")
  createdAt            DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// =======================
// AUTH: Sessions
// =======================
model Session {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid @map("user_id")
  sessionTokenHash String   @map("session_token_hash")
  ip               String?
  userAgent        String?  @map("user_agent")
  createdAt        DateTime @default(now()) @map("created_at")
  expiresAt        DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =======================
// AUTH: Login Attempts
// =======================
model LoginAttempt {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid @map("user_id")
  loginEmail String? @map("login_email")
  provider  String
  ip        String?
  success   Boolean
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// =======================
// APP CORE: Projects
// =======================
model Project {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid @map("user_id")
  name        String
  description String?
  options     Json      @default("{}")
  visibility  String    @default("private")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]
  generations Generation[]
  snapshots   Snapshot[]
  deployments Deployment[]
}

// =======================
// APP CORE: Files
// =======================
model File {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @db.Uuid @map("project_id")
  path       String
  type       String   @default("code")
  isBinary   Boolean  @default(false) @map("is_binary")
  content    String?
  blob       Bytes?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
}

// =======================
// APP CORE: Generations
// =======================
model Generation {
  id           String   @id @default(uuid()) @db.Uuid
  projectId    String   @db.Uuid @map("project_id")
  userId       String   @db.Uuid @map("user_id")
  prompt       String
  options      Json     @default("{}")
  model        String
  tokensInput  Int      @default(0) @map("tokens_input")
  tokensOutput Int      @default(0) @map("tokens_output")
  costUsd      Decimal  @default(0.0) @map("cost_usd")
  createdAt    DateTime @default(now()) @map("created_at")

  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  generationFiles GenerationFile[]
  snapshots    Snapshot[]
}

// =======================
// APP CORE: Generation Files
// =======================
model GenerationFile {
  id            String   @id @default(uuid()) @db.Uuid
  generationId  String   @db.Uuid @map("generation_id")
  filePath      String   @map("file_path")
  fileContent   String?  @map("file_content")
  changeType    String   @default("create") @map("change_type")

  generation    Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)
}

// =======================
// APP CORE: Snapshots
// =======================
model Snapshot {
  id               String   @id @default(uuid()) @db.Uuid
  projectId        String   @db.Uuid @map("project_id")
  label            String?
  files            Json
  fromGenerationId String?  @db.Uuid @map("from_generation_id")
  createdAt        DateTime @default(now()) @map("created_at")

  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fromGeneration   Generation? @relation(fields: [fromGenerationId], references: [id], onDelete: SetNull)
}

// =======================
// APP CORE: Deployments
// =======================
model Deployment {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @db.Uuid @map("project_id")
  provider  String
  state     String   @default("queued")
  url       String?
  meta      Json?
  createdAt DateTime @default(now()) @map("created_at")

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
